{"disqus":{"path":"/posts/2012-03-30-writing-functional-code-in-c-ii-function-composition/","commentCount":4,"comments":[{"postId":"4303142981","parentPostId":null,"date":"2012-05-25T07:48:18Z","author":"Richard Polton","avatar":"","message":"<p>Hi, since I've known enough to understand the difference, my preference has always been for functional-style programming and I particularly enjoyed the STL when I discovered it way back when I was actively writing new C++ code. It has been, therefore, very interesting and refreshing to read your article and see a modern take on those things I was thinking about and on occasion doing, so many thanks for that. I have constructed the same sort of framework in C# recently, originally in .NET2.0 and latterly using .NET3.5. For example I have defined a '&gt;' operator for currying function arguments, which I like and, for the same reasons as it exists in F#, think it adds to the readability of the code. It's interesting to contrast my C# with your C++ - we're doing similar things but the language leads us in different directions.</p>","replies":[{"postId":"4303143165","parentPostId":"4303142981","date":"2012-05-25T21:18:55Z","author":"lucabol","avatar":"","message":"<p>Thanks for the kind words. LINQ brings functional programming to C#, but not currying. Frankly, I don't use curry all that much myself, probably I've not yet fully embraced the Haskell style of 'extreme function composition'. Well, one thing at the time ...</p>","replies":[{"postId":"4303143625","parentPostId":"4303143165","date":"2012-05-28T12:16:56Z","author":"Richard Polton","avatar":"","message":"<p>Hi, your reply prompted a further thought: if you don't use currying 'all that much' do you use any heuristics to determine how to order your function parameters? I have found that, through currying considerations, I tend to construct my functions with their arguments in reverse order to many of my colleagues because I almost always place the most frequently-changing parameter at the end. It's difficult to deduce the answer from your article because the functions all seem to be functions of one parameter :-)</p>","replies":[]}]}]},{"postId":"4303142980","parentPostId":null,"date":"2012-05-28T19:57:49Z","author":"lucabol","avatar":"","message":"<p>Yours is a technically sound strategy. I tend to put the most obvious parameters upfront, the ones that whatever user of the function would naturally expect. I then put the others, defaulted to something sensible if it exists. Maybe that's why I don't use currying all that much, because it doesn't naturally put the most important things first, which strongly appeals to my aesthetic sense.</p>","replies":[]}]}}