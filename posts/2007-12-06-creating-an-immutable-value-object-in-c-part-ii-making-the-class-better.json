{"disqus":{"path":"/posts/2007-12-06-creating-an-immutable-value-object-in-c-part-ii-making-the-class-better/","commentCount":16,"comments":[{"postId":"4303143486","parentPostId":null,"date":"2007-12-06T12:37:22Z","author":"Luca Bolognese's WebLog : Crea","avatar":"","message":"<p>PingBack from <a href=\"http://blogs.msdn.com/lucabol/archive/2007/12/03/creating-an-immutable-value-object-in-c-part-i-using-a-class.aspx\" rel=\"nofollow noopener\" title=\"http://blogs.msdn.com/lucabol/archive/2007/12/03/creating-an-immutable-value-object-in-c-part-i-using-a-class.aspx\">http://blogs.msdn.com/lucabol/archive/2007/12/03/creating-an-immutable-value-object-in-c-part-i-using-a-class.aspx</a></p>","replies":[]},{"postId":"4303143490","parentPostId":null,"date":"2007-12-07T07:30:56Z","author":"Tom Kirby-Green","avatar":"","message":"<p>This is shaping up to be a very timely and useful mini series Luca :-) Please don't keep us waiting too long for the next part!</p>","replies":[]},{"postId":"4303143492","parentPostId":null,"date":"2007-12-21T02:46:29Z","author":"Marcelo Cantos","avatar":"","message":"<p>First off, the most practical representation of date spans is an inclusive lower bound and exclusive upper bound, i.e., [start, end). Equally important, they should be treated as points in time (which is what DateTime represents), not complete days. Thus, new DateTime(d, d) is empty for any d (solving empty ranges) and new DateTime(d, d.AddDays(1)) is exactly one day.<br>Also, the type should really be DateTimeSpan.<br>Convenience properties such as a static DateSpan.Empty would come in handy.<br>Finally, DateTime has MaxValue and MinValue, which serve as fairly natural surrogates for +/- infinity, and also eliminate edge-cases from set operations.</p>","replies":[]},{"postId":"4303143489","parentPostId":null,"date":"2007-12-21T02:48:05Z","author":"Marcelo Cantos","avatar":"","message":"<p>Oops! Wherever I said 'new DateTime', I meant 'new DateSpan'.</p>","replies":[]},{"postId":"4303143499","parentPostId":null,"date":"2007-12-21T12:36:35Z","author":"lucabol","avatar":"","message":"<p>Thanks for the comment. It makes me think of something an old functional guy said once: \"The idea of reusing objects across domain boundaries is absurd, not even something as simple as Person can be defined the same way in different domains\".<br>In my domain (a stock backtesting app) a DateSpan needs to have a day boundary, not a point in time boundary. Also, inclusive lower and upper bounds have been working pretty well for my app so far (even if I can see that your definition has conceptual appeal).<br>And anyhow, I'm just trying to show how to use some language features. I don't care much about the particular sample. I could have chosen Complex, but I thought it was too boring ...</p>","replies":[]},{"postId":"4303143497","parentPostId":null,"date":"2007-12-24T17:39:25Z","author":"Luca Bolognese's WebLog","avatar":"","message":"<p>Other posts: Part I - Using a class Part II - Making the class better In Part II I talked about the asymmetry</p>","replies":[]},{"postId":"4303143500","parentPostId":null,"date":"2007-12-24T18:01:25Z","author":"Noticias externas","avatar":"","message":"<p>Other posts: Part I - Using a class Part II - Making the class better In Part II I talked about the asymmetry</p>","replies":[]},{"postId":"4303143502","parentPostId":null,"date":"2007-12-28T18:45:33Z","author":"Luca Bolognese's WebLog","avatar":"","message":"<p>Other posts: Part I - Using a class Part II - Making the class better Part III - Using a struct In the</p>","replies":[]},{"postId":"4303143504","parentPostId":null,"date":"2007-12-28T19:06:20Z","author":"Noticias externas","avatar":"","message":"<p>Other posts: Part I - Using a class Part II - Making the class better Part III - Using a struct In the</p>","replies":[]},{"postId":"4303143503","parentPostId":null,"date":"2007-12-29T00:54:21Z","author":"MSDNArchive","avatar":"","message":"<p>Luca: Consider...<br>public DateTime Start { get; private set; }</p>","replies":[]},{"postId":"4303143511","parentPostId":null,"date":"2007-12-29T18:15:50Z","author":"lucabol","avatar":"","message":"<p>Hey Kit,<br>Automatic properties don't prevent setting the property from inside the class. The readonly keyword does.</p>","replies":[]},{"postId":"4303143512","parentPostId":null,"date":"2008-01-11T13:36:12Z","author":"Luca Bolognese's WebLog","avatar":"","message":"<p>Other posts: Part I - Using a class Part II - Making the class better Part III - Using a struct Part</p>","replies":[]},{"postId":"4303143514","parentPostId":null,"date":"2008-01-11T13:52:05Z","author":"Noticias externas","avatar":"","message":"<p>Other posts: Part I - Using a class Part II - Making the class better Part III - Using a struct Part</p>","replies":[]},{"postId":"4303143513","parentPostId":null,"date":"2008-01-16T18:36:53Z","author":"Tales from the Evil Empire","avatar":"","message":"<p>For some reason, there's been a lot of buzz lately around immutability in C#. If you're interested in</p>","replies":[]},{"postId":"4303143515","parentPostId":null,"date":"2008-06-03T15:37:59Z","author":"adamjcooper.com/blog","avatar":"","message":"<p>The Quest for Quick-and-Easy Class-Based Immutable Value Objects in C# - Part 1: Introduction</p>","replies":[]},{"postId":"4303143516","parentPostId":null,"date":"2008-06-03T16:57:34Z","author":"adamjcooper.com/blog","avatar":"","message":"<p>The Quest for Quick-and-Easy Immutable Value Objects in C#</p>","replies":[]}]}}