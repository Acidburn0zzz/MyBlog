{"disqus":{"path":"/posts/2008-01-11-creating-an-immutable-value-object-in-c-part-v-using-a-library/","commentCount":12,"comments":[{"postId":"4303143380","parentPostId":null,"date":"2008-01-11T14:25:38Z","author":"Geek Lectures - Things geeks s","avatar":"","message":"<p>PingBack from <a href=\"http://geeklectures.info/2008/01/11/creating-an-immutable-value-object-in-c-part-v-using-a-library/\" rel=\"nofollow noopener\" title=\"http://geeklectures.info/2008/01/11/creating-an-immutable-value-object-in-c-part-v-using-a-library/\">http://geeklectures.info/2008/01/11/creating-an-immutable-value-object-in-c-part-v-using-a-library/</a></p>","replies":[]},{"postId":"4303143382","parentPostId":null,"date":"2008-01-16T18:44:56Z","author":"Community Blogs","avatar":"","message":"<p>For some reason, there's been a lot of buzz lately around immutability in C#. If you're interested in</p>","replies":[]},{"postId":"4303143395","parentPostId":null,"date":"2008-01-21T01:45:40Z","author":"Charlie Calvert's Community Bl","avatar":"","message":"<p>Welcome to the XXXIX issue of Community Convergence. The big news this week is that Microsoft has begun</p>","replies":[]},{"postId":"4303143396","parentPostId":null,"date":"2008-02-01T20:06:12Z","author":"mg","avatar":"","message":"<p>Nice work!<br>One question about \"stealing\" the base class - what about introducing another layer of abstraction and instead of declaring your type like this:<br>public class DateSpan: Record&lt;DateTime, DateTime, bool&gt; {...}<br>do something like this:<br>public class DateSpan: ValueObject&lt;Record&lt;DateTime, DateTime, bool&gt;&gt; {...}<br>The ValueObject class would then expose the record to as a protected property and pass Equals, ToString... to the Record object. It would make the declarations a little bit more complicated, but your biggest drawback is not a problem anymore.</p>","replies":[]},{"postId":"4303143397","parentPostId":null,"date":"2008-02-04T12:07:41Z","author":"lucabol","avatar":"","message":"<p>I think I'm missing something. Aren't you still stealing the base class with the ValueObject class?<br>I.E. you cannot declare DateSpan to inherit from a MySpan class.</p>","replies":[]},{"postId":"4303143402","parentPostId":null,"date":"2008-02-04T14:25:00Z","author":"mg","avatar":"","message":"<p>Well, I was thinking about ValueObject more in terms of a type system base class, where you can put your additional behaviour and not spoil the Record class. You are right that still you cannot have a deeper hierarchy of types with this solution.<br>BTW: don't you think it would be nice to have a language support for immutable types? Something like:<br>public readonly class MyClass...<br>where all fields are readonly fields of readonly types?</p>","replies":[]},{"postId":"4303143400","parentPostId":null,"date":"2008-02-04T14:44:49Z","author":"lucabol","avatar":"","message":"<p>Yeah, you are right.<br>We talked about having first class readonly classes a bunch of times, but we never came up with a proposal we are happy with. We are still discussing the topic.</p>","replies":[]},{"postId":"4303143408","parentPostId":null,"date":"2008-02-06T05:25:49Z","author":"Doekman","avatar":"","message":"<p>Isn't code generation a much better option at this time, while 1st class readonly classes aren't available?</p>","replies":[]},{"postId":"4303143413","parentPostId":null,"date":"2008-02-06T11:02:03Z","author":"lucabol","avatar":"","message":"<p>It is an option. I wouldn't say it is better. It has pros and cons (i.e. readibility, amount of code, mantainability).<br>As for me, I prefer library solutions to codegen whenever available (and roughly usable).</p>","replies":[]},{"postId":"4303143414","parentPostId":null,"date":"2008-02-08T16:53:24Z","author":"qq","avatar":"","message":"<p>I think you guys in immutable space have frankly lost it. It is not new, it is common principles that do not apply in all fields, and just because functional attempts are again popular you are hitting on attempting to solve a problem with a wrong tool: .net type system.<br>If you think magically you will somehow parallelise code and algorithms, you are in for a big 'immutable surprise'.<br>No, silver, bullet..</p>","replies":[]},{"postId":"4303143412","parentPostId":null,"date":"2008-02-08T17:32:41Z","author":"lucabol","avatar":"","message":"<p>All these posts say is: iff you need an immutable class, here are a bunch of options of how to do it in C#.<br>I don't think I'm claiming anything more than that. Am I?</p>","replies":[]},{"postId":"4303143411","parentPostId":null,"date":"2008-04-08T17:06:25Z","author":"Luca Bolognese's WebLog","avatar":"","message":"<p>Previous posts: Part I - Background Tuples are a way for you not to name things. In Object Oriented languages</p>","replies":[]}]}}